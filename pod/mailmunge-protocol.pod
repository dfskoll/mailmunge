=head1 NAME

mailmunge-protocol - Conventions used by C<mailmunge> to communicate
with filter programs.

=head1 DESCRIPTION

L<mailmunge> and L<mailmunge-multiplexor> provide a mechanism for
hooking scripts and programs into Sendmail's milter API.

The milter API is multi-threaded and written in C; C<mailmunge> lets
you write single-threaded filters written in the language of your
choice.  Some of the flexibility and speed of milter is sacrificed,
but the ease of writing filters more than compensates for this slight
loss.

This manual describes how C<mailmunge> communicates with the filter
program, and gives you enough information to write your own filter
program as a replacement for the C<Mailmunge> Perl modules if you wish.

=head1 PROTOCOL OVERVIEW

The protocol is a simple line-based protocol.  The filter program
runs in a loop, communicating with the C<mailmunge-multiplexor>
program on its standard input and standard output file descriptors.

Each time through the loop, the server reads a single line
from standard input; this line contains a command.  The server
executes the command and then outputs a single-line response to
standard-output.

For the C<scan> command, additional information is placed in a
temporary working directory.  When the filter processes the C<scan>
command (typically in its C<filter_message> function), it is expected
to populate the working directory with more files, which communicate
the scan results back to C<mailmunge>.

=head1 FILTER INVOCATION

The filter program may be invoked in one of four ways.  As mentioned
above, the filter program is expected to run in a loop, accepting
commands from standard input and writing responses to standard output.
It should exit if it receives end-of-file on standard input.

=over

=item 1

I<filter_prog> -server

If the program is invoked with the single argument C<-server>, it is
expected to run as a server as described above.

=item 2

I<filter_prog> -serveru

If the program is invoked with the single argument C<-serveru>, it is
expected to run as a server.  In addition, anything it prints to file
descriptor 3 is used to update the "worker status" field in the
multiplexor.  This lets the filter inform administrators exactly what
it is doing.  (See the C<-Z> option to C<mailmunge-multiplexor>.)

=item 3

I<filter_prog> -embserver

Similar to C<-server>, but used by the embedded Perl interpreter.  The
program should run any initialization routines and then exit.  The
multiplexor will subsequently call the Perl routine
C<_mailmunge_do_main_loop> when it is time for the worker to begin
running.

=item 4

I<filter_prog> -embserveru

Similar to C<-embserver> with the additional magic of updating
the worker status from data written to file descriptor 3.

=back

If you use the standard C<Mailmunge> Perl modules, the
C<Mailmunge::Filter> class takes care of interpreting command-line arguments
and running the filter in the appropriate mode.

=head1 THE MAIN SERVER LOOP

C<mailmunge-multiplexor> runs the filter program, which is expected to
run continuously in a server loop.  The filter program reads commands
from standard input, and writes results to standard output.  The
filter program I<must> exit shortly after it sees EOF on its standard
input.  If it does not exit within 10 seconds, it will be terminated
with SIGTERM.  If that still does not work, then after a further 10
seconds, it is killed with SIGKILL.

=head2 PERCENT ENCODING

Many parameters in commands and replies are I<percent-encoded>.  To
percent-encode a sequence of bytes, replace any byte whose value is
less than or equal to 32, greater than 126, or one of C<%>, C<\>, C<">,
or C<'> with the three-byte sequence C<%XY> where C<XY> is
the hexadecimal value of the byte.

Here are some examples of percent-encoded strings:

    Hello                   ==> Hello
    Hello, there!           ==> Hello,%20there!
    "How\ are%you?"         ==> %22How%5C%20are%25you?%22

=head2 SERVER COMMANDS

All server commands are single line commands.  Each command is followed
by a space-separated list of arguments; each argument is
percent-encoded.  The commands defined are:

=over

=item ping

Elicits a reply of "PONG" from the server.

=item scan I<queue_id> I<dir>

Run a scan for the mail identified by the Sendmail queue-ID I<queue_id>
in the directory I<dir>.  The command is terminated with a newline.
The server must write a newline-terminated C<ok> if the scan completed
successfully, or C<error: msg> if something went wrong.

Additional information is passed in a working directory as described
in L</THE SCAN COMMAND>.

=item relayok I<ip_addr> I<hostname> I<client_port> I<daemon_ip> I<daemon_port> I<queue_id>

Test whether or not to accept a connection from the specified host.
The server must write the following to standard output:

=over

=item C<ok 1>

Accept the connection.

=item C<ok 0 error_message code dsn>

Reject the connection with the specified code, dsn and text error_message.

=item C<ok -1 error_message code dsn>

Tempfail the connection with the specified code, dsn and text error_message.

=back

In all cases, error_message, code and dsn must be percent-encoded.

Note that even if the connection is accepted, a later scan can still
reject the message based on other criteria.  C<ip_addr> is the IP
address of the relay and C<hostname> is the hostname (if it could be
determined; otherwise, the IP address in square brackets).

=item helook I<ip_addr> I<hostname> I<helo_string> I<client_port> I<daemon_ip> I<daemon_port> I<queue_id>

Test whether or not to accept the HELO/EHLO command. The server must
write the following to standard output:

=over

=item C<ok 1>

Accept the HELO/EHLO command.

=item C<ok 0 error_message code dsn>

Reject the command with the specified code, dsn and text error_message.

=item C<ok -1 error_message code dsn>

Tempfail the command with the specified code, dsn and text error_message.

=back

In all cases, error_message, code and dsn must be percent-encoded.

=item senderok I<sender_addr> I<ip_addr> I<hostname> I<helo_string> I<dir> I<queue_id> [I<esmtp_args>...]

Test whether or not to accept mail from the specified sender.  The
server must write the following to standard output:

=over

=item C<ok 1>

Accept the sender.

=item C<ok 0 error_message code dsn>

Reject the sender with the specified code, dsn and text error_message.

=item C<ok -1 error_message code dsn>

Tempfail the sender with the specified code, dsn and text error_message.

=back

In all cases, error_message, code and dsn must be percent-encoded.

Note that even if the sender is accepted, a later C<scan> can still
reject the message based on other criteria.  C<sender_addr> is the
sender's e-mail address. The C<ip_addr> and C<hostname> arguments are as
in C<relayok>. C<helo_string> is the argument to the SMTP HELO/EHLO
command. C<dir> is the Mailmunge spool directory, and C<queue_id> is the
Sendmail or Postfix queue identifier.

The optional C<esmtp_args> are space-separated, percent-encoded ESMTP
arguments supplied with the MAIL FROM: command.

=item recipok I<recip_addr> I<sender_addr> I<ip_addr> I<hostname> I<first_recip> I<helo_string> I<dir> I<queue_id> [I<esmtp_args>...]

Test whether or not to accept mail for the specified recipient.  The
server must write the following to standard output:

=over

=item C<ok 1>

Accept the recipient.

=item C<ok 0 error_message code dsn>

Reject the recipient with the specified code, dsn and text error_message.

=item C<ok -1 error_message code dsn>

Tempfail the recipient with the specified code, dsn and text error_message.

=back

In all cases, error_message, code and dsn must be percent-encoded.

C<recip_addr> is the argument to the RCPT TO: command, and
C<first_recip> is the argument to the first RCPT TO: command for this
message.  Other arguments are as in C<senderok>.

=item map I<map_name> I<key>

If you are using a map socket (the C<-N> option to
C<mailmunge-multiplexor>), then the server should look up the key
I<key> in the map I<map_name>.  The server should print a single line
to standard output.  The first word on the line should be one of OK,
NOTFOUND, TEMP, TIMEOUT or PERM, indicating a successful lookup,
absence of the key, a temporary failure, a timeout or a permanent
failure, respectively.  This should be followed by a space and a
percent-encoded string representing the value of the key (if it was
found) or an optional error message (if something went wrong.)

=item tick I<band>

The filter should run C<filter_tick> with the specified
I<band> argument.  It should print a single line to standard output:

C<tock I<band>>

=item Additional Commands

If you use the standard Mailmunge perl modules, your filter can define
a function C<filter_unknown_cmd> that can extend the list of server
commands.  If you do this, make sure all of your commands start with
an upper-case letter to avoid conflicts if more built-in commands are
defined in the future.

=back

=head2 SERVER REPLIES

Your filter should I<not> write anything to standard output except
reply codes as documented above, or the multiplexor will become
confused.  You should I<not> terminate the program; simply echo an
C<error:> reply and return to the server loop.

When you send a reply code back to the multiplexor, be sure to terminate
it with a newline, and to flush standard output.  If your program uses
the Standard I/O library, standard output may not be flushed immediately,
and C<mailmunge-multiplexor> will wait forever for the filter's reply,
and eventually kill the filter on the assumption it has hung up.

If the filter program receives a SIGINT signal, it must terminate.
This is used by C<mailmunge-multiplexor> to terminate workers after
they have processed a given number of e-mail messages.

=head1 THE SCAN COMMAND

The C<scan> command is different from most
commands in that most of the required information is placed in a
temporary working directory.  Commands are placed in a file in that
directory, and results should be written to a different file in
that directory, as described below.

=head2 FILE LAYOUT FOR THE SCAN COMMAND

When the filter begins a scan, it should change directories to the
working directory.  In that directory, it will find the following
files.

=over

=item INPUTMSG

A file containing the complete input e-mail message, including headers.

=item HEADERS

A file containing just the headers, one per line.  Headers which are
continued over several lines in the original message are collapsed
into a single line in this file.

=item PRISTINE_HEADERS

A file containing just the headers, exactly as they were received from
the SMTP client.  In contrast the HEADERS, we do not unwrap the headers
in this file, so a single header may extend over several lines.

=item COMMANDS

A file containing a list of commands.  Each command is a single
letter and may be followed by arguments.  Each command is on its
own line.

=back

=head3 THE COMMANDS FILE

All commands in the COMMANDS file have their arguments percent-encoded.

The commands from the C to Perl filters are:

=over

=item SI<sender>

The sender of the message.

=item sI<esmtp_arg>

An ESMTP argument associated with the sender (such as SIZE=54432).  There
is one C<s> line for each ESMTP argument.

=item UI<subject>

The message subject.

=item XI<message_id>

The Message-ID.

=item RI<recipient> I<mailer> I<host> I<addr>

A recipient.  There is one C<R> line for each recipient.  The
I<mailer>, I<host> and I<addr> parts of the line are the values of the
Sendmail {rcpt_mailer}, {rcpt_host} and {rcpt_addr} macros if they are
available, or "?" if not.

=item rI<esmtp_arg>

An ESMTP argument associated with the I<most recent> recipient (such
as NOTIFY=never).  There is one C<r> line for each SMTP argument.

=item !

If this command is present, there are suspicious characters in the message
headers.

=item ?

If this command is present, there are suspicious characters in the message
body.

=item II<host_addr>

The SMTP relay host's IP address in dotted-quad notation.

=item iI<identifier>

An identifier generated by Mailmunge.  On a given host, this
identifier is very likely to be unique over a timespan of about 24
years.

=item HI<host_name>

The SMTP relay host name.

=item EI<argument>

The argument to the SMTP "EHLO" or "HELO" command.

=item QI<qid>

The message's Sendmail or Postfix queue-ID.

=item =I<macro> I<val>

Set the value of the specified Sendmail macro to I<val>.  Both
I<macro> and I<val> are percent-encoded, but the single space
character between them is not.

=back

=head2 SCAN OPERATION

When the filter performs a scan, it can make use of all the information
in the files mentioned previously.  If the filter needs temporary
working files, it should create a subdirectory under the working directory
for its own use.  In this case, you do not have to clean up your working
files, because C<mailmunge> deletes the working directory when the
filter returns.

=head2 FINAL FILE LAYOUT

The filter communicates the results of the scan back to C<mailmunge>
by creating additional files in the working directory.  The most
important file is called RESULTS, and it contains a list of one-letter,
one-line commands back to the filter.  As usual, command arguments
are percent-escaped.  The commands from the filter back to C<mailmunge>
are:

=over

=item BI<code> I<dsn> I<reply_text>

Bounce (reject) the message with the specified SMTP reply code, DSN
code and reply text.

=item D

Silently discard the message and pretend it was delivered.

=item TI<code> I<dsn> I<reply_text>

Return an SMTP temporary failure code with the specified SMTP code, DSN
and reply text.

=item C

Replace the message body.  If this command is present, the file
NEWBODY must contain the new message body.

=item MI<header_val>

Replace the MIME Content-Type header with a new value.  Used to change
MIME boundaries or convert non-MIME to MIME messages.

=item HI<header> I<val>

Add a new header I<header> with value I<val>.  The I<header>
should not contain a colon.  Each of I<header> and I<val> is
percent-escaped, but the single space between them is not.

=item NI<header> I<index> I<val>

Adds a new header I<header> with value I<val> in position
I<index>.  An index of zero specifies that the new header should
be prepended before all existing headers.

=item II<header> I<index> I<val>

Replace the I<index'th> occurrence of I<header> with value
I<val>.  The I<index> is 1-based.  The I<header> should not
contain a colon.  Each of I<header>, I<index> and I<val> is
percent-escaped, but the single space between them is not.

=item JI<header> I<index>

Delete the I<index>'th occurrence of I<header>.

=item RI<recip>

Add a new recipient I<recip> to the message.

=item SI<recip>

Delete I<recip> from the list of message recipients.

=item fI<sender>

Change the envelope sender to I<sender>.  This is only supported by
Sendmail 8.14.0 and higher.

=item F

Indicate that we have finished issuing commands.  Anything after
an F line is ignored.

=back

=head1 NON-PERL FILTERS

In principle, you can replace the usual Mailmunge filter
F</etc/mailmunge/mailmunge.pl> with any program you wish (using
L<mailmunge-multiplexor>'s B<-f> option) just as long as it obeys the
protocol and command-line invocation options documented here.  This
would require significant effort and it's probably better to stick
with the Perl code in most cases.

Obviously, if you want to write a non-Perl filter, you cannot use the
embedded Perl interpreter (the B<-E> mailmunge-multiplexor option.)

=head1 SEE ALSO

L<mailmunge>, L<mailmunge-multiplexor>, L<Mailmunge>

=head1 AUTHOR

C<mailmunge> was written by Dianne Skoll <dianne@skollsoft.com>.
The C<mailmunge> home page is L<http://www.mailmunge.org/>.

=head1 LICENSE

This code is licensed under the terms of the GNU General Public License,
version 2.
